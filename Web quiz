import React, { useState } from 'react';

const App = () => {
  const [currentPage, setCurrentPage] = useState('start');
  const [showInfo, setShowInfo] = useState(false);
  const [selections, setSelections] = useState({
    card1: '',
    card2: '',
    card3: ''
  });
  const [showResult, setShowResult] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);

  // Dataset from AI hallucination cases
  const datasetFields = {
    'Case Name': ['In Re CorMedix', 'Johnson v. Dunn', 'Jordan et al. v. Chicago Housing Authority', 'USA v. McGee et al.', 'Blaser v. Campbell', 'Foster Chambers v. Village of Oak Park', 'Gurpreet Kaur v. Captain Joel Desso', 'Coomer v. My Pillow, Inc.', 'Smith v. Gamble', 'AQ v. BW', 'Mata v. Avianca, Inc', 'Parker v. Forsyth NNO and Others'],
    'Court': ['D.C. New Jersey', 'N.D. Alabama', 'Cook County District Court', 'Alabama D.C.', 'Civil Resolution Tribunal', '7the Circuit CA', 'NDNY', 'D. Colorado', 'Ohio CA', 'S.D.N.Y.', 'Magistrates Court', 'Supreme Court of Western Australia'],
    'Country': ['USA', 'Canada', 'Australia', 'Israel', 'Germany', 'South Africa', 'UK', 'Brazil', 'Ireland', 'Italy', 'Netherlands', 'India'],
    'Date': ['2025-07-23', '2025-07-18', '2025-07-17', '2025-07-16', '2025-07-15', '2025-07-09', '2025-07-07', '2025-07-04', '2025-07-03', '2025-07-02', '2024-11-25', '2023-06-22'],
    'Party': ['Judge', 'Lawyer', 'Pro Se Litigant', 'Expert', 'Paralegal'],
    'AI Tool': ['ChatGPT', 'Claude', 'Claude Sonnet 4', 'Co-Pilot', 'Gemini', 'Google Bard', 'Perplexity', 'Westlaw AI', 'Lexis+AI', 'CoCounsel', 'Legal Genius'],
    'Monetary Penalty (USD$)': ['0.0', '5500.0', '1000.0', '6000.0', '921.0', '100.0', '250.0', '50000.0', '7000.0', '31100.0', '2000.0', '5000.0']
  };

  const fieldOptions = ['Case Name', 'Court', 'Country', 'Date', 'Party', 'AI Tool', 'Monetary Penalty (USD$)'];

  // Generate random card data ensuring no duplicate field types
  const generateCardData = () => {
    const availableFields = [...fieldOptions];
    const cards = [];
    
    for (let i = 0; i < 3; i++) {
      const randomFieldIndex = Math.floor(Math.random() * availableFields.length);
      const fieldType = availableFields[randomFieldIndex];
      availableFields.splice(randomFieldIndex, 1); // Remove used field
      
      const fieldData = datasetFields[fieldType];
      const randomValue = fieldData[Math.floor(Math.random() * fieldData.length)];
      
      cards.push({
        value: randomValue,
        type: fieldType
      });
    }
    
    return cards;
  };

  const [cardData, setCardData] = useState(generateCardData());

  const handleSelectionChange = (cardIndex, value) => {
    setSelections(prev => ({
      ...prev,
      [`card${cardIndex + 1}`]: value
    }));
  };

  const handleSubmit = () => {
    const correct = cardData.every((card, index) => {
      return selections[`card${index + 1}`] === card.type;
    });
    
    setIsCorrect(correct);
    setShowResult(true);
  };

  const resetGame = () => {
    setSelections({
      card1: '',
      card2: '',
      card3: ''
    });
    setShowResult(false);
    setShowInfo(false);
    setCurrentPage('start');
    setCardData(generateCardData()); // Generate new random cards
  };

  const handleEasterEgg = () => {
    const links = [
      'https://www.youtube.com/shorts/eNBRmwa-un4',
      'https://www.youtube.com/shorts/wFCQMWkvekg'
    ];
    const randomLink = links[Math.floor(Math.random() * links.length)];
    window.open(randomLink, '_blank');
  };

  const InfoModal = () => (
    <div style={styles.infoOverlay} onClick={() => setShowInfo(false)}>
      <div style={styles.infoModal} onClick={(e) => e.stopPropagation()}>
        <h2 style={styles.infoTitle}>How to Play</h2>
        <p style={styles.infoText}>
          Look at the data shown in each card and select the field type that best matches the data from the options below each card. 
          <br/><br/>
          For example: If you see "USA", select "Country". If you see "2025-07-18", select "Date".
          <br/><br/>
          Match all three cards correctly to win!
        </p>
        <button 
          style={styles.closeButton}
          className="close-button"
          onClick={() => setShowInfo(false)}
        >
          Got It!
        </button>
      </div>
    </div>
  );

  const ClaudeLogo = () => (
    <svg 
      width="20" 
      height="20" 
      viewBox="0 0 24 24" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      style={{ marginRight: '8px' }}
    >
      {/* Outer circle */}
      <circle 
        cx="12" 
        cy="12" 
        r="10" 
        stroke="#bb9457" 
        strokeWidth="2" 
        fill="#432818"
      />
      {/* Happy smile */}
      <path 
        d="M8 13c0 1.5 1.5 3 4 3s4-1.5 4-3" 
        stroke="#ffe6a7" 
        strokeWidth="1.5" 
        strokeLinecap="round"
        fill="none"
      />
      {/* Left eye */}
      <circle 
        cx="9" 
        cy="9" 
        r="1" 
        fill="#ffe6a7"
      />
      {/* Right eye */}
      <circle 
        cx="15" 
        cy="9" 
        r="1" 
        fill="#ffe6a7"
      />
      {/* Friendly eyebrows */}
      <path 
        d="M7 7.5c1-0.5 1.5-0.5 2.5-0.5M16.5 7c-1-0.5-1.5-0.5-2.5-0.5" 
        stroke="#bb9457" 
        strokeWidth="1" 
        strokeLinecap="round"
      />
      {/* Small highlight on face */}
      <circle 
        cx="10" 
        cy="7" 
        r="0.5" 
        fill="#ffe6a7" 
        opacity="0.7"
      />
    </svg>
  );

  const WellingtonLogo = () => (
    <svg 
      width="24" 
      height="28" 
      viewBox="0 0 24 28" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      style={{ marginRight: '6px' }}
    >
      {/* Shield outline */}
      <path 
        d="M12 2L4 6v8c0 6 8 12 8 12s8-6 8-12V6l-8-4z" 
        fill="#1e3a8a" 
        stroke="#bb9457" 
        strokeWidth="0.5"
      />
      {/* Top left quadrant - Crown */}
      <rect x="4" y="6" width="8" height="6" fill="#dc2626"/>
      <path d="M6 8h4l-0.5 1h-3l-0.5-1z" fill="#fbbf24"/>
      <circle cx="8" cy="9" r="0.8" fill="#fbbf24"/>
      
      {/* Top right quadrant - Lion */}
      <rect x="12" y="6" width="8" height="6" fill="#fbbf24"/>
      <path d="M14 8c0.5 0 1 0.5 1 1s-0.5 1-1 1" stroke="#dc2626" strokeWidth="0.8" fill="none"/>
      <circle cx="16" cy="9" r="0.3" fill="#dc2626"/>
      <path d="M17 8.5l1 0.5-1 0.5" stroke="#dc2626" strokeWidth="0.5"/>
      
      {/* Bottom left quadrant - Castle */}
      <rect x="4" y="12" width="8" height="6" fill="#059669"/>
      <rect x="6" y="14" width="1.5" height="3" fill="#bb9457"/>
      <rect x="8.5" y="14" width="1.5" height="3" fill="#bb9457"/>
      <rect x="7" y="13" width="2" height="1" fill="#bb9457"/>
      
      {/* Bottom right quadrant - Cross */}
      <rect x="12" y="12" width="8" height="6" fill="#7c3aed"/>
      <path d="M16 13v4M14 15h4" stroke="#ffe6a7" strokeWidth="1" strokeLinecap="round"/>
      
      {/* Central emblem */}
      <circle cx="12" cy="14" r="2" fill="#ffe6a7" stroke="#432818" strokeWidth="0.5"/>
      <text x="12" y="15.5" textAnchor="middle" fontSize="2" fill="#432818" fontWeight="bold">W</text>
    </svg>
  );

  const MGLogo = () => (
    <div style={{
      backgroundColor: '#84cc16',
      borderRadius: '6px',
      padding: '4px 8px',
      marginRight: '8px',
      display: 'flex',
      alignItems: 'center',
      minWidth: '32px',
      height: '20px',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
    }}>
      <span style={{
        color: 'white',
        fontSize: '12px',
        fontWeight: 'bold',
        fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif',
        letterSpacing: '0.5px'
      }}>
        mg
      </span>
    </div>
  );

  const styles = {
    // Start Page Styles
    startContainer: {
      minHeight: '100vh',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#ffe6a7ff',
      position: 'relative'
    },
    startCard: {
      textAlign: 'center',
      padding: '2rem',
      borderRadius: '0.5rem',
      boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
      backgroundColor: '#772f1a'
    },
    startTitle: {
      fontSize: '2.25rem',
      fontWeight: 'bold',
      marginBottom: '2rem',
      color: 'white',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },
    startDescription: {
      fontSize: '1.125rem',
      marginBottom: '2rem',
      color: '#ffe6a7ff',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },
    startButton: {
      padding: '1rem 2rem',
      fontSize: '1.25rem',
      fontWeight: '600',
      borderRadius: '0.5rem',
      transition: 'all 0.3s ease',
      backgroundColor: '#bb9457ff',
      color: '#432818ff',
      border: 'none',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif',
      cursor: 'pointer'
    },
    creditContainer: {
      position: 'absolute',
      bottom: '20px',
      right: '20px',
      display: 'flex',
      alignItems: 'center',
      backgroundColor: 'rgba(119, 47, 26, 0.9)',
      padding: '12px 16px',
      borderRadius: '12px',
      border: '2px solid #bb9457',
      backdropFilter: 'blur(8px)',
      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'
    },
    creditText: {
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif',
      fontSize: '14px',
      color: '#ffe6a7',
      fontWeight: '500',
      letterSpacing: '0.5px'
    },

    // Result Page Styles
    resultContainer: {
      minHeight: '100vh',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    },
    resultCard: {
      textAlign: 'center',
      padding: '3rem',
      borderRadius: '0.5rem',
      boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
      backgroundColor: 'white'
    },
    resultEmoji: {
      fontSize: '5rem',
      marginBottom: '1.5rem'
    },
    resultTitle: {
      fontSize: '2.25rem',
      fontWeight: 'bold',
      marginBottom: '1rem',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },
    resultDescription: {
      fontSize: '1.25rem',
      marginBottom: '2rem',
      color: '#6b7280',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },

    // Main Page Styles
    mainContainer: {
      minHeight: '100vh',
      backgroundColor: '#ffe6a7ff'
    },
    header: {
      padding: '1.5rem',
      textAlign: 'center',
      backgroundColor: '#772f1a',
      position: 'relative'
    },
    infoButton: {
      position: 'absolute',
      top: '1.5rem',
      right: '1.5rem',
      width: '40px',
      height: '40px',
      borderRadius: '50%',
      backgroundColor: '#bb9457',
      color: '#432818',
      border: 'none',
      fontSize: '20px',
      fontWeight: 'bold',
      cursor: 'pointer',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      transition: 'all 0.3s ease',
      boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)'
    },
    infoOverlay: {
      position: 'fixed',
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      backgroundColor: 'rgba(0, 0, 0, 0.7)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: '1000',
      padding: '20px'
    },
    infoModal: {
      backgroundColor: '#ffe6a7',
      padding: '2rem',
      borderRadius: '16px',
      maxWidth: '500px',
      width: '100%',
      textAlign: 'center',
      boxShadow: '0 20px 40px rgba(0, 0, 0, 0.3)',
      border: '3px solid #772f1a'
    },
    infoTitle: {
      fontSize: '1.5rem',
      fontWeight: 'bold',
      color: '#432818',
      marginBottom: '1rem',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },
    infoText: {
      fontSize: '1.1rem',
      color: '#432818',
      marginBottom: '1.5rem',
      lineHeight: '1.5',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },
    closeButton: {
      padding: '0.75rem 1.5rem',
      fontSize: '1rem',
      fontWeight: '600',
      borderRadius: '8px',
      backgroundColor: '#772f1a',
      color: '#ffe6a7',
      border: 'none',
      cursor: 'pointer',
      transition: 'all 0.3s ease',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },
    easterEggButton: {
      position: 'fixed',
      bottom: '0px',
      left: '0px',
      width: '18px',
      height: '18px',
      backgroundColor: 'rgba(187, 148, 87, 0.4)',
      border: 'none',
      cursor: 'pointer',
      opacity: '0.5',
      transition: 'all 0.3s ease',
      borderRadius: '3px',
      zIndex: '10',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif',
      padding: '0'
    },
    instagramIcon: {
      width: '12px',
      height: '12px',
      background: 'linear-gradient(45deg, #bb9457 0%, #99582a 25%, #772f1a 50%, #432818 75%, #2d1a0f 100%)',
      borderRadius: '2px',
      position: 'relative',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    },
    instagramIconInner: {
      width: '7px',
      height: '7px',
      border: '1px solid #ffe6a7',
      borderRadius: '50%',
      position: 'relative'
    },
    instagramDot: {
      width: '1.5px',
      height: '1.5px',
      backgroundColor: '#ffe6a7',
      borderRadius: '50%',
      position: 'absolute',
      top: '0.5px',
      right: '0.5px'
    },
    headerTitle: {
      fontSize: '1.875rem',
      fontWeight: 'bold',
      color: 'white',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },
    headerSubtitle: {
      fontSize: '1.125rem',
      marginTop: '0.5rem',
      color: '#ffe6a7ff',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },
    contentContainer: {
      maxWidth: '1200px',
      margin: '0 auto',
      padding: '1.5rem 2rem'
    },
    cardsGrid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(3, 1fr)',
      gap: '2rem',
      marginBottom: '2rem'
    },
    cardColumn: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center'
    },
    card: {
      width: '100%',
      maxWidth: '350px',
      height: '210px',
      padding: '14px',
      borderRadius: '14px',
      boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
      textAlign: 'center',
      marginBottom: '2rem',
      backgroundColor: '#432818',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      position: 'relative'
    },
    cardValue: {
      fontSize: '32px',
      fontWeight: 'bold',
      padding: '18px',
      borderRadius: '7px',
      backgroundColor: '#99582a',
      color: '#ffe6a7',
      width: 'calc(100% - 10px)',
      height: 'calc(100% - 10px)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      textAlign: 'center',
      wordBreak: 'break-word',
      overflow: 'hidden',
      lineHeight: '1.3',
      margin: '5px',
      boxSizing: 'border-box'
    },
    fieldSelection: {
      width: '100%'
    },
    fieldContainer: {
      padding: '1.5rem',
      borderRadius: '0.5rem',
      boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
      marginBottom: '0.75rem',
      transition: 'all 0.3s ease',
      backgroundColor: '#bb9457ff',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },
    fieldTitle: {
      fontSize: '1.5rem',
      fontWeight: 'bold',
      textAlign: 'center',
      marginBottom: '1rem',
      color: '#432818ff',
      transition: 'color 0.3s ease'
    },
    optionsContainer: {
      display: 'flex',
      flexDirection: 'column',
      gap: '0.75rem'
    },
    optionLabel: {
      display: 'flex',
      alignItems: 'center',
      cursor: 'pointer',
      transition: 'all 0.2s ease',
      padding: '0.75rem',
      borderRadius: '0.25rem'
    },
    radioButton: {
      width: '1.25rem',
      height: '1.25rem',
      borderRadius: '50%',
      border: '2px solid',
      marginRight: '1rem',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      transition: 'all 0.2s ease',
      flexShrink: 0
    },
    radioButtonInner: {
      width: '0.625rem',
      height: '0.625rem',
      borderRadius: '50%',
      backgroundColor: '#ffe6a7',
      animation: 'pulse 1s infinite'
    },
    optionText: {
      fontSize: '1.25rem',
      fontWeight: '500',
      transition: 'all 0.2s ease',
      color: 'black',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif'
    },
    submitContainer: {
      textAlign: 'center',
      marginTop: '3rem',
      marginBottom: '2rem'
    },
    submitButton: {
      padding: '1rem 3rem',
      fontSize: '1.25rem',
      fontWeight: '600',
      borderRadius: '0.5rem',
      transition: 'all 0.3s ease',
      backgroundColor: '#772f1a',
      color: '#ffe6a7ff',
      border: 'none',
      fontFamily: '"Lucida Sans Unicode", "Lucida Grande", sans-serif',
      cursor: 'pointer'
    },
    submitButtonDisabled: {
      opacity: '0.5',
      cursor: 'not-allowed'
    }
  };

  // Responsive styles for smaller screens
  const mediaQueries = `
    * {
      box-sizing: border-box;
    }
    @media (max-width: 768px) {
      .cards-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      .card {
        height: 180px !important;
        max-width: 320px !important;
      }
      .card-value {
        font-size: 28px !important;
      }
      .field-title {
        font-size: 20px !important;
      }
      .option-text {
        font-size: 16px !important;
      }
      .credit-container {
        bottom: 10px !important;
        right: 10px !important;
        padding: 8px 12px !important;
      }
      .credit-text {
        font-size: 12px !important;
      }
    }
    @media (min-width: 1200px) {
      .card {
        height: 250px !important;
        max-width: 380px !important;
      }
      .card-value {
        font-size: 38px !important;
      }
    }
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    .start-button:hover, .submit-button:hover, .close-button:hover {
      transform: scale(1.05);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    }
    .info-button:hover {
      transform: scale(1.1);
      background-color: #99582a !important;
      color: #ffe6a7 !important;
    }
    .easter-egg:hover {
      opacity: 0.6 !important;
      background-color: rgba(255, 230, 167, 0.3) !important;
      border-color: rgba(255, 230, 167, 0.4) !important;
      transform: scale(1.1);
    }
    .option-label:hover {
      background-color: rgba(0, 0, 0, 0.1);
    }
    .option-label:hover .option-text {
      transform: translateX(4px);
    }
    .card-inner {
      background-color: #99582a;
      color: #ffe6a7;
      border-radius: 7px;
      padding: 18px;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
      word-break: break-word;
      overflow: hidden;
      line-height: 1.3;
      font-weight: bold;
      font-size: 32px;
    }
    .credit-container:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
      background-color: rgba(119, 47, 26, 1) !important;
    }
  `;

  const StartPage = () => (
    <>
      <style>{mediaQueries}</style>
      <link href="https://fonts.googleapis.com/css2?family=Courier+Prime:wght@400;700&family=Lucida+Console&display=swap" rel="stylesheet" />
      <div style={styles.startContainer}>
        <div style={styles.startCard}>
          <h1 style={styles.startTitle}>
            Field Matching Game
          </h1>
          <p style={styles.startDescription}>
            Match the data shown in cards with their correct field types!
          </p>
          <button
            onClick={() => setCurrentPage('main')}
            style={styles.startButton}
            className="start-button"
          >
            Start Game
          </button>
        </div>
        
        <div style={styles.creditContainer} className="credit-container">
          <ClaudeLogo />
          <span style={styles.creditText} className="credit-text">
            Made with the help of Claude
          </span>
        </div>
      </div>
    </>
  );

  const ResultPage = () => (
    <>
      <style>{mediaQueries}</style>
      <link href="https://fonts.googleapis.com/css2?family=Courier+Prime:wght@400;700&family=Lucida+Console&display=swap" rel="stylesheet" />
      <div 
        style={{
          ...styles.resultContainer,
          backgroundColor: isCorrect ? '#22c55e' : '#ef4444'
        }}
      >
        <div style={styles.resultCard}>
          <div style={styles.resultEmoji}>
            {isCorrect ? '✅' : '❌'}
          </div>
          <h1 style={{
            ...styles.resultTitle,
            color: isCorrect ? '#22c55e' : '#ef4444'
          }}>
            {isCorrect ? 'Congratulations!' : 'Try Again!'}
          </h1>
          <p style={styles.resultDescription}>
            {isCorrect 
              ? 'You matched all fields correctly!' 
              : 'Some fields were incorrectly matched.'
            }
          </p>
          <button
            onClick={resetGame}
            style={styles.startButton}
            className="start-button"
          >
            Play Again
          </button>
        </div>
      </div>
    </>
  );

  const MainPage = () => (
    <>
      <style>{mediaQueries}</style>
      <link href="https://fonts.googleapis.com/css2?family=Courier+Prime:wght@400;700&family=Lucida+Console&display=swap" rel="stylesheet" />
      <div style={styles.mainContainer}>
        <button
          style={styles.easterEggButton}
          className="easter-egg"
          onClick={handleEasterEgg}
          title=""
        >
          <div style={styles.instagramIcon}>
            <div style={styles.instagramIconInner}>
              <div style={styles.instagramDot}></div>
            </div>
          </div>
        </button>
        <header style={styles.header}>
          <button
            style={styles.infoButton}
            className="info-button"
            onClick={() => setShowInfo(true)}
            title="How to play"
          >
            ?
          </button>
          <h1 style={styles.headerTitle}>Match the Fields</h1>
          <p style={styles.headerSubtitle}>
            Select the correct field type for each card
          </p>
        </header>

        {showInfo && <InfoModal />}

        <div style={styles.contentContainer}>
          <div style={styles.cardsGrid} className="cards-grid">
            {cardData.map((card, index) => (
              <div key={index} style={styles.cardColumn}>
                <div style={styles.card} className="card">
                  <div className="card-inner card-value">
                    {card.value}
                  </div>
                </div>

                <div style={styles.fieldSelection}>
                  <div style={styles.fieldContainer}>
                    <h3 style={styles.fieldTitle} className="field-title">
                      Match Field Type
                    </h3>
                    
                    <div style={styles.optionsContainer}>
                      {fieldOptions.map(option => (
                        <label 
                          key={option} 
                          style={styles.optionLabel}
                          className="option-label"
                        >
                          <input
                            type="radio"
                            name={`card-${index}`}
                            value={option}
                            checked={selections[`card${index + 1}`] === option}
                            onChange={(e) => handleSelectionChange(index, e.target.value)}
                            style={{ display: 'none' }}
                          />
                          <div 
                            style={{
                              ...styles.radioButton,
                              borderColor: selections[`card${index + 1}`] === option ? '#432818' : '#99582a',
                              backgroundColor: selections[`card${index + 1}`] === option ? '#432818' : '#ffe6a7',
                              transform: selections[`card${index + 1}`] === option ? 'scale(1.1)' : 'scale(1)'
                            }}
                          >
                            {selections[`card${index + 1}`] === option && (
                              <div style={styles.radioButtonInner}></div>
                            )}
                          </div>
                          <span 
                            style={{
                              ...styles.optionText,
                              transform: selections[`card${index + 1}`] === option ? 'translateX(0.25rem)' : 'translateX(0)'
                            }}
                            className="option-text"
                          >
                            {option.charAt(0).toUpperCase() + option.slice(1)}
                          </span>
                        </label>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div style={styles.submitContainer}>
            <button
              onClick={handleSubmit}
              disabled={!selections.card1 || !selections.card2 || !selections.card3}
              style={{
                ...styles.submitButton,
                ...((!selections.card1 || !selections.card2 || !selections.card3) && styles.submitButtonDisabled)
              }}
              className="submit-button"
            >
              Submit
            </button>
          </div>
        </div>
      </div>
    </>
  );

  if (showResult) {
    return <ResultPage />;
  }

  return (
    <>
      {currentPage === 'main' && (
        <button
          style={styles.easterEggButton}
          className="easter-egg"
          onClick={handleEasterEgg}
          title=""
        >
          <div style={styles.instagramIcon}>
            <div style={styles.instagramIconInner}>
              <div style={styles.instagramDot}></div>
            </div>
          </div>
        </button>
      )}
      {currentPage === 'start' ? <StartPage /> : <MainPage />}
    </>
  );
};

export default App;
